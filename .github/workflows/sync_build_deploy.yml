name: sync-build-deploy
on:
  schedule:
    - cron: '0 */2 * * *'

  workflow_dispatch:
   inputs:
      run_sync:
        description: "Run Sync"
        type: choice
        required: true
        default: 'No'
        options:
         - 'Yes'
         - 'No'

permissions:
  contents: write
  issues: write
  pull-requests: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  IS_SYNC: ${{ inputs.run_sync == 'Yes' || github.event_name == 'schedule' }}

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Set up Git
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mmrl-util

      - name: Sync
        if: ${{ env.IS_SYNC == 'true' }}
        run: |
          mmrl-util sync --diff versions_diff.md
          
          # 清理旧版本，只保留最新的两个版本
          for module_dir in modules/*/; do
            if [ -d "$module_dir" ]; then
              module_name=$(basename "$module_dir")
              echo "Processing module: $module_name"
              
              # 从 update.json 读取版本历史
              if [ -f "${module_dir}update.json" ]; then
                # 提取所有版本的时间戳和版本号，按时间戳排序（最新的在前）
                versions=($(jq -r '.versions[] | [.timestamp, .version] | @tsv' "${module_dir}update.json" | sort -rn | cut -f2))
                total_versions=${#versions[@]}
                
                if [ $total_versions -gt 2 ]; then
                  echo "Found $total_versions versions for $module_name"
                  echo "Keeping versions: ${versions[0]}, ${versions[1]}"
                  
                  # 删除旧版本（从第三个版本开始）
                  for ((i=2; i<total_versions; i++)); do
                    version="${versions[$i]}"
                    echo "Removing old version: $version"
                    
                    # 删除版本目录
                    rm -rf "${module_dir}${version}"
                    # 删除对应的 zip 文件
                    rm -f "${module_dir}${module_name}-${version}.zip"
                    # 删除对应的 md 文件
                    rm -f "${module_dir}${module_name}-${version}.md"
                  done
                else
                  echo "No old versions to clean for $module_name (found $total_versions versions)"
                fi
              else
                echo "Warning: update.json not found for $module_name"
              fi
            fi
          done

      - name: Write versions diff to summary
        if: ${{ env.IS_SYNC == 'true' }}
        run: |
          if [ -f versions_diff.md ]; then
            echo "## Versions Diff" >> $GITHUB_STEP_SUMMARY
            echo "$(cat versions_diff.md)" >> $GITHUB_STEP_SUMMARY
            rm versions_diff.md
          fi
          
      - name: Write latest versions to summary
        if: ${{ env.IS_SYNC != 'true' }}
        run: |
          mmrl-util index --list > latest_versions.md
          echo "## Latest Versions" >> $GITHUB_STEP_SUMMARY
          echo "$(cat latest_versions.md)" >> $GITHUB_STEP_SUMMARY
          rm latest_versions.md

      - name: Index and Push
        if: ${{ env.IS_SYNC == 'true' }}
        run: |
          current_time=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          mmrl-util index --push
          git diff --quiet && git diff --staged --quiet || git commit -m "chore(sync): Update repository data

          🤖 Auto-generated by GitHub Actions
          🕒 Time: $current_time
          
          - Sync repository data
          - Update module index
          - Generate static pages"
  
  build:
    runs-on: ubuntu-latest
    needs: sync
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
        
      - name: Setup Pages
        uses: actions/configure-pages@v3
        
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
