name: sync-build-deploy
on:
  schedule:
    - cron: '0 */6 * * *'

  workflow_dispatch:
   inputs:
      run_sync:
        description: "Run Sync"
        type: choice
        required: true
        default: 'No'
        options:
         - 'Yes'
         - 'No'

permissions:
  contents: write
  issues: write
  pull-requests: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  IS_SYNC: ${{ inputs.run_sync == 'Yes' || github.event_name == 'schedule' }}

jobs:
  sync:
    runs-on: ubuntu-latest
    outputs:
      has_updates: ${{ steps.check_updates.outputs.has_updates }}
      updated_modules: ${{ steps.extract_updates.outputs.modules }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Set up Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mmrl-util

      - name: Create log directory
        run: |
          mkdir -p log
          mkdir -p json

      - name: Sync and Check Updates
        id: check_updates
        if: ${{ env.IS_SYNC == 'true' }}
        run: |
          mmrl-util sync --diff versions_diff.md --push 2>&1 | tee log/sync_$(date +"%Y-%m-%d").log
          
          if [ -f "versions_diff.md" ] && [ -s "versions_diff.md" ]; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "检测到更新，更新内容："
            cat versions_diff.md
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
            echo "未检测到更新"
          fi

      - name: Write versions diff to summary
        if: ${{ env.IS_SYNC == 'true' }}
        run: |
          if [ -f versions_diff.md ]; then
            echo "## Versions Diff" >> $GITHUB_STEP_SUMMARY
            echo "$(cat versions_diff.md)" >> $GITHUB_STEP_SUMMARY
            rm versions_diff.md
          fi
          
      - name: Write latest versions to summary
        if: ${{ env.IS_SYNC != 'true' }}
        run: |
          mmrl-util index --list > latest_versions.md
          echo "## Latest Versions" >> $GITHUB_STEP_SUMMARY
          echo "$(cat latest_versions.md)" >> $GITHUB_STEP_SUMMARY
          rm latest_versions.md

      - name: Extract updated modules from logs
        id: extract_updates
        if: ${{ env.IS_SYNC == 'true' }}
        run: |
          if [ -f "log/sync_$(date +"%Y-%m-%d").log" ]; then
            UPDATED_MODULES=$(grep -o "update: \[[^]]*\] -> update to" log/sync_$(date +"%Y-%m-%d").log 2>/dev/null | sed 's/update: \[\([^]]*\)\] -> update to/\1/' | sort | uniq | jq -R -s -c 'split("\n") | map(select(length > 0))' || echo "[]")
            echo "modules=$UPDATED_MODULES" >> $GITHUB_OUTPUT
            echo "提取的更新模块: $UPDATED_MODULES"
          else
            echo "尝试查找任何同步日志文件..."
            LATEST_LOG=$(find log -name "sync_*.log" -type f -printf "%T@ %p\n" 2>/dev/null | sort -nr | head -n1 | cut -d' ' -f2)
            if [ -n "$LATEST_LOG" ]; then
              echo "找到最新日志文件: $LATEST_LOG"
              UPDATED_MODULES=$(grep -o "update: \[[^]]*\] -> update to" "$LATEST_LOG" 2>/dev/null | sed 's/update: \[\([^]]*\)\] -> update to/\1/' | sort | uniq | jq -R -s -c 'split("\n") | map(select(length > 0))' || echo "[]")
              echo "modules=$UPDATED_MODULES" >> $GITHUB_OUTPUT
              echo "提取的更新模块: $UPDATED_MODULES"
            else
              echo "警告：找不到任何同步日志文件"
              echo "modules=[]" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Index and Push
        if: ${{ env.IS_SYNC == 'true' }}
        run: |
          mmrl-util index --push

      - name: Upload logs
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: |
            log/*.log
            json/*.json
  
  build:
    runs-on: ubuntu-latest
    needs: sync
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
        
      - name: Setup Pages
        uses: actions/configure-pages@v5
        
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

