name: sync-build-deploy
on:
  schedule:
    - cron: '0 */4 * * *'

  workflow_dispatch:
   inputs:
      run_sync:
        description: "Run Sync"
        type: choice
        required: true
        default: 'No'
        options:
         - 'Yes'
         - 'No'

permissions:
  contents: write
  issues: write
  pull-requests: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  IS_SYNC: ${{ inputs.run_sync == 'Yes' || github.event_name == 'schedule' }}

jobs:
  sync:
    runs-on: ubuntu-latest
    outputs:
      has_updates: ${{ steps.check_updates.outputs.has_updates }}
      updated_modules: ${{ steps.extract_updates.outputs.modules }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Set up Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mmrl-util

      - name: Create log directory
        run: |
          mkdir -p log
          mkdir -p json

      - name: Sync and Check Updates
        id: check_updates
        if: ${{ env.IS_SYNC == 'true' }}
        run: |
          mmrl-util sync --diff versions_diff.md 2>&1 | tee log/sync_$(date +"%Y-%m-%d").log
          
          if [ -f "versions_diff.md" ] && [ -s "versions_diff.md" ]; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "检测到更新，更新内容："
            cat versions_diff.md
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
            echo "未检测到更新"
          fi

      - name: Write versions diff to summary
        if: ${{ env.IS_SYNC == 'true' }}
        run: |
          if [ -f versions_diff.md ]; then
            echo "## Versions Diff" >> $GITHUB_STEP_SUMMARY
            echo "$(cat versions_diff.md)" >> $GITHUB_STEP_SUMMARY
            rm versions_diff.md
          fi
          
      - name: Write latest versions to summary
        if: ${{ env.IS_SYNC != 'true' }}
        run: |
          mmrl-util index --list > latest_versions.md
          echo "## Latest Versions" >> $GITHUB_STEP_SUMMARY
          echo "$(cat latest_versions.md)" >> $GITHUB_STEP_SUMMARY
          rm latest_versions.md

      - name: Extract updated modules from logs
        id: extract_updates
        if: ${{ env.IS_SYNC == 'true' }}
        run: |
          if [ -f "log/sync_$(date +"%Y-%m-%d").log" ]; then
            UPDATED_MODULES=$(grep -o "update: \[[^]]*\] -> update to" log/sync_$(date +"%Y-%m-%d").log 2>/dev/null | sed 's/update: \[\([^]]*\)\] -> update to/\1/' | sort | uniq | jq -R -s -c 'split("\n") | map(select(length > 0))' || echo "[]")
            echo "modules=$UPDATED_MODULES" >> $GITHUB_OUTPUT
            echo "提取的更新模块: $UPDATED_MODULES"
          else
            echo "尝试查找任何同步日志文件..."
            LATEST_LOG=$(find log -name "sync_*.log" -type f -printf "%T@ %p\n" 2>/dev/null | sort -nr | head -n1 | cut -d' ' -f2)
            if [ -n "$LATEST_LOG" ]; then
              echo "找到最新日志文件: $LATEST_LOG"
              UPDATED_MODULES=$(grep -o "update: \[[^]]*\] -> update to" "$LATEST_LOG" 2>/dev/null | sed 's/update: \[\([^]]*\)\] -> update to/\1/' | sort | uniq | jq -R -s -c 'split("\n") | map(select(length > 0))' || echo "[]")
              echo "modules=$UPDATED_MODULES" >> $GITHUB_OUTPUT
              echo "提取的更新模块: $UPDATED_MODULES"
            else
              echo "警告：找不到任何同步日志文件"
              echo "modules=[]" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Index and Push
        if: ${{ env.IS_SYNC == 'true' }}
        run: |
          mmrl-util index --push

      - name: Upload logs
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: |
            log/*.log
            json/*.json
  
  build:
    runs-on: ubuntu-latest
    needs: sync
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
        
      - name: Setup Pages
        uses: actions/configure-pages@v5
        
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  notify:
    needs: [sync, deploy]
    if: needs.sync.outputs.has_updates == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0
        
      - name: Download logs
        uses: actions/download-artifact@v4
        with:
          name: logs
          path: .
          
      - name: List downloaded files
        run: |
          echo "下载的文件列表:"
          find . -type f | sort
      
      - name: Check previous commit version content
        run: |
          echo "获取最近的提交信息..."
          git log -n 5 --oneline
          
          mkdir -p temp_previous_modules
          
          MODULES=$(echo '${{ needs.sync.outputs.updated_modules }}' | jq -r '.[]?' 2>/dev/null || echo "")
          
          if [ -n "$MODULES" ]; then
            echo "发现更新的模块: $MODULES"
            
            # 确保modules.json文件存在
            if [ ! -f "modules.json" ]; then
              echo "警告: modules.json文件不存在，尝试下载..."
              curl -s -o modules.json https://raw.githubusercontent.com/${{ github.repository }}/main/modules.json || echo "无法下载modules.json文件"
            fi
            
            # 检查modules.json文件是否存在且有效
            if [ -f "modules.json" ] && [ -s "modules.json" ]; then
              echo "成功找到modules.json文件"
            else
              echo "警告: modules.json文件不存在或为空，创建临时文件"
              echo '{"modules":[]}' > modules.json
            fi
            
            for MODULE_ID in $MODULES; do
              echo "处理模块 $MODULE_ID 的历史更新日志..."
              
              MODULE_DIR="modules/$MODULE_ID"
              
              if [ -d "$MODULE_DIR" ]; then
                # 使用-e参数检查文件是否存在
                CURRENT_VERSION=$(jq -r --arg id "$MODULE_ID" '.modules[] | select(.id == $id) | .version' modules.json 2>/dev/null || echo "unknown")
                CURRENT_VERSION_CODE=$(jq -r --arg id "$MODULE_ID" '.modules[] | select(.id == $id) | .versionCode' modules.json 2>/dev/null || echo "0")
                
                if [ "$CURRENT_VERSION" = "null" ] || [ "$CURRENT_VERSION" = "" ]; then
                  CURRENT_VERSION="unknown"
                fi
                
                if [ "$CURRENT_VERSION_CODE" = "null" ] || [ "$CURRENT_VERSION_CODE" = "" ]; then
                  CURRENT_VERSION_CODE="0"
                fi
                
                echo "当前版本: $CURRENT_VERSION ($CURRENT_VERSION_CODE)"
                
                if [ -f "$MODULE_DIR/${CURRENT_VERSION}_${CURRENT_VERSION_CODE}.md" ]; then
                  echo "已经存在最新版本的更新日志: $MODULE_DIR/${CURRENT_VERSION}_${CURRENT_VERSION_CODE}.md"
                  mkdir -p "temp_previous_modules/$MODULE_ID"
                  cp "$MODULE_DIR/${CURRENT_VERSION}_${CURRENT_VERSION_CODE}.md" "temp_previous_modules/$MODULE_ID/"
                else
                  echo "未找到最新版本的更新日志，尝试获取历史记录..."
                  
                  LATEST_COMMIT=$(git rev-parse HEAD)
                  
                  PREVIOUS_COMMIT=$(git rev-parse HEAD~1)
                  
                  if git diff --name-only $PREVIOUS_COMMIT $LATEST_COMMIT | grep -q "^$MODULE_DIR"; then
                    echo "模块 $MODULE_ID 在最近提交中有变化"
                    
                    mkdir -p "temp_previous_modules/$MODULE_ID"
                    git show "$PREVIOUS_COMMIT:$MODULE_DIR" 2>/dev/null | grep -E '\.md$' | while read -r MD_FILE; do
                      echo "提取文件: $MD_FILE"
                      git show "$PREVIOUS_COMMIT:$MODULE_DIR/$MD_FILE" > "temp_previous_modules/$MODULE_ID/$MD_FILE" 2>/dev/null || echo "无法提取文件 $MD_FILE"
                    done
                    
                    if [ ! "$(ls -A "temp_previous_modules/$MODULE_ID")" ]; then
                      echo "# 版本 $CURRENT_VERSION ($CURRENT_VERSION_CODE) 更新" > "temp_previous_modules/$MODULE_ID/update.md"
                      echo "此版本已更新，但没有详细的更新日志。" >> "temp_previous_modules/$MODULE_ID/update.md"
                    fi
                  else
                    echo "模块 $MODULE_ID 在最近提交中没有变化，尝试查找最新的更新日志..."
                    if [ -d "$MODULE_DIR" ]; then
                      mkdir -p "temp_previous_modules/$MODULE_ID"
                      LATEST_MD=$(find "$MODULE_DIR" -name "*.md" -type f -printf "%T@ %p\n" | sort -nr | head -1 | cut -d' ' -f2-)
                      if [ -n "$LATEST_MD" ]; then
                        echo "找到最新的MD文件: $LATEST_MD"
                        cp "$LATEST_MD" "temp_previous_modules/$MODULE_ID/"
                      else
                        echo "未找到任何MD文件，创建默认更新日志"
                        echo "# 版本 $CURRENT_VERSION ($CURRENT_VERSION_CODE) 更新" > "temp_previous_modules/$MODULE_ID/update.md"
                        echo "此版本已更新，但没有详细的更新日志。" >> "temp_previous_modules/$MODULE_ID/update.md"
                      fi
                    fi
                  fi
                fi
              else
                echo "警告: 模块目录不存在 $MODULE_DIR"
              fi
            done
          else
            echo "警告: 未能解析到更新的模块列表"
          fi
          
          echo "临时目录中的文件:"
          find temp_previous_modules -type f | sort
          
      - name: Set updated modules environment variable
        run: |
          echo "设置更新模块环境变量: '${{ needs.sync.outputs.updated_modules }}'"
          # 确保值被正确引用，避免shell解析问题
          MODULES_JSON='${{ needs.sync.outputs.updated_modules }}'
          echo "UPDATED_MODULES='$MODULES_JSON'" >> $GITHUB_ENV
          echo "TEMP_MODULES_DIR=temp_previous_modules" >> $GITHUB_ENV
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
          
      - name: Copy modules.json if exists
        run: |
          if [ -f "modules.json" ]; then
            echo "复制现有的modules.json到json目录"
            mkdir -p json
            cp modules.json json/
          else
            echo "尝试从仓库下载modules.json"
            mkdir -p json
            curl -s -o json/modules.json https://raw.githubusercontent.com/${{ github.repository }}/main/modules.json || echo "无法下载modules.json文件"
          fi
          
      - name: Run Telegram notification script
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_TOPIC_ID: ${{ secrets.TELEGRAM_TOPIC_ID }}
          PREVIOUS_MODULES_DIR: "temp_previous_modules"
        run: |
          echo "运行Telegram通知脚本..."
          echo "当前工作目录: $(pwd)"
          echo "可用的环境变量:"
          echo "UPDATED_MODULES=${UPDATED_MODULES}"
          echo "PREVIOUS_MODULES_DIR=${PREVIOUS_MODULES_DIR}"
          ls -la
          ls -la temp_previous_modules || echo "temp_previous_modules目录不存在"
          python scripts/telegram_updates.py
