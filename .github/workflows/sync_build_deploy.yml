name: sync-build-deploy
on:
  schedule:
    - cron: '0 */4 * * *'

  workflow_dispatch:
   inputs:
      run_sync:
        description: "Run Sync"
        type: choice
        required: true
        default: 'No'
        options:
         - 'Yes'
         - 'No'

permissions:
  contents: write
  issues: write
  pull-requests: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  IS_SYNC: ${{ inputs.run_sync == 'Yes' || github.event_name == 'schedule' }}

jobs:
  sync:
    runs-on: ubuntu-latest
    outputs:
      has_updates: ${{ steps.check_version_updates.outputs.has_updates }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git config pull.rebase true
          
      - name: Git Safe Push
        id: git_push
        shell: bash
        run: |
          git_safe_push() {
            max_retries=3
            retry_count=0
            
            while [ $retry_count -lt $max_retries ]; do
              if git pull --rebase origin main && git push origin main; then
                echo "Successfully pushed changes"
                return 0
              else
                retry_count=$((retry_count + 1))
                if [ $retry_count -eq $max_retries ]; then
                  echo "Failed to push after $max_retries attempts"
                  return 1
                fi
                echo "Push failed, retrying... (attempt $retry_count of $max_retries)"
                sleep 5
              fi
            done
          }
          
          echo "git_safe_push() {
            max_retries=3
            retry_count=0
            
            while [ \$retry_count -lt \$max_retries ]; do
              if git pull --rebase origin main && git push origin main; then
                echo \"Successfully pushed changes\"
                return 0
              else
                retry_count=\$((retry_count + 1))
                if [ \$retry_count -eq \$max_retries ]; then
                  echo \"Failed to push after \$max_retries attempts\"
                  return 1
                fi
                echo \"Push failed, retrying... (attempt \$retry_count of \$max_retries)\"
                sleep 5
              fi
            done
          }" > git_safe_push.sh
          chmod +x git_safe_push.sh

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mmrl-util

      - name: Check Version Updates
        id: check_version_updates
        run: |
          if [ ! -f "json/last_versions.json" ]; then
            echo "{}" > json/last_versions.json
          fi
          
          python - <<EOF
          import json
          import os
          import subprocess
          import sys
          
          def load_json(file_path, default=None):
              try:
                  if os.path.exists(file_path):
                      with open(file_path, 'r', encoding='utf-8') as f:
                          return json.load(f)
              except Exception as e:
                  print(f"Error loading {file_path}: {e}")
              return default if default is not None else {}
          
          try:
              result = subprocess.run(
                  ["mmrl-util", "index", "--json"],
                  capture_output=True,
                  text=True,
                  check=True
              )
              current_data = json.loads(result.stdout)
              
              current_versions = {}
              for module in current_data.get("modules", []):
                  module_id = module.get("id")
                  if module_id:
                      current_versions[module_id] = {
                          "version": module.get("version", ""),
                          "versionCode": module.get("versionCode", 0),
                          "author": module.get("author", ""),
                          "name": module.get("name", "")
                      }
          except Exception as e:
              print(f"Error getting current versions: {e}")
              current_versions = {}
          
          if not current_versions and os.path.exists("json/modules.json"):
              try:
                  modules_data = load_json("json/modules.json", {})
                  for module in modules_data.get("modules", []):
                      module_id = module.get("id")
                      if module_id:
                          current_versions[module_id] = {
                              "version": module.get("version", ""),
                              "versionCode": module.get("versionCode", 0),
                              "author": module.get("author", ""),
                              "name": module.get("name", "")
                          }
              except Exception as e:
                  print(f"Error reading modules.json: {e}")
          
          last_versions = load_json("json/last_versions.json", {})
          
          has_updates = False
          for module, info in current_versions.items():
              if module not in last_versions or last_versions[module]["version"] != info["version"]:
                  print(f"New version found for {module}: {info['version']}")
                  has_updates = True
          
          with open("json/last_versions.json", "w", encoding="utf-8") as f:
              json.dump(current_versions, f, indent=2)
          
          print(f"has_updates={'true' if has_updates else 'false'}")
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"has_updates={'true' if has_updates else 'false'}\n")
          EOF
          
          if ! git diff --quiet; then
            git add json/last_versions.json
            current_time=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
            git commit -m "chore(versions): Update latest versions

            ðŸ¤– Auto-generated by GitHub Actions
            ðŸ•’ Time: $current_time"
            
            source git_safe_push.sh
            git_safe_push
          fi

      - name: Sync Repository
        run: |
          git fetch origin main
          git reset --hard origin/main
          git clean -fd

      - name: Sync and Check Updates
        if: ${{ env.IS_SYNC == 'true' }}
        id: check_updates
        run: |
          mmrl-util sync --diff versions_diff.md
          
          if [ -f "log/sync.log" ] && grep -q "New version found" "log/sync.log"; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
          fi

      - name: Clean old versions
        run: |
          git fetch origin main
          git reset --hard origin/main
          git clean -fd
          
          for module_dir in modules/*/; do
            if [ -d "$module_dir" ]; then
              module_name=$(basename "$module_dir")
              echo "Processing module: $module_name"
              
              if [ -f "${module_dir}update.json" ]; then
                temp_file=$(mktemp)
                
                jq -r '.versions | sort_by(.timestamp) | reverse | .[] | "\(.timestamp) \(.version)"' "${module_dir}update.json" > "$temp_file"
                
                total_versions=$(wc -l < "$temp_file")
                
                if [ "$total_versions" -gt 3 ]; then
                  echo "Found $total_versions versions for $module_name"
                  
                  keep_v1=$(sed -n '1p' "$temp_file" | cut -d' ' -f2)
                  keep_v2=$(sed -n '2p' "$temp_file" | cut -d' ' -f2)
                  keep_v3=$(sed -n '3p' "$temp_file" | cut -d' ' -f2)
                  echo "Keeping versions: $keep_v1, $keep_v2, $keep_v3"
                  
                  while read -r timestamp version; do
                    if [ "$version" != "$keep_v1" ] && [ "$version" != "$keep_v2" ] && [ "$version" != "$keep_v3" ]; then
                      echo "Removing old version: $version"
                      
                      if [ -d "${module_dir}${version}" ]; then
                        rm -rf "${module_dir}${version}"
                        git add -u "${module_dir}${version}" || true
                      fi
                      
                      if [[ "$version" == v* ]]; then
                        pure_version="${version#v}"
                        [ -f "${module_dir}${pure_version}.zip" ] && rm -f "${module_dir}${pure_version}.zip" && git add -u "${module_dir}${pure_version}.zip" || true
                        [ -f "${module_dir}${pure_version}.md" ] && rm -f "${module_dir}${pure_version}.md" && git add -u "${module_dir}${pure_version}.md" || true
                      else
                        [ -f "${module_dir}${version}.zip" ] && rm -f "${module_dir}${version}.zip" && git add -u "${module_dir}${version}.zip" || true
                        [ -f "${module_dir}${version}.md" ] && rm -f "${module_dir}${version}.md" && git add -u "${module_dir}${version}.md" || true
                      fi
                      
                      jq --arg ver "$version" '.versions |= map(select(.version != $ver))' "${module_dir}update.json" > "${module_dir}update.json.tmp"
                      mv "${module_dir}update.json.tmp" "${module_dir}update.json"
                      git add "${module_dir}update.json"
                    fi
                  done < "$temp_file"
                else
                  echo "No old versions to clean for $module_name (found $total_versions versions)"
                fi
                
                rm -f "$temp_file"
              else
                echo "Warning: update.json not found for $module_name"
              fi
            fi
          done
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            current_time=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
            git add -A
            git commit -m "chore: Clean old module versions

            ðŸ¤– Auto-generated by GitHub Actions
            ðŸ•’ Time: $current_time
            
            - Remove old module versions
            - Keep latest three versions for each module
            - Update update.json files"
            
            source git_safe_push.sh
            git_safe_push
          fi

      - name: Write versions diff to summary
        if: ${{ env.IS_SYNC == 'true' }}
        run: |
          if [ -f versions_diff.md ]; then
            echo "## Versions Diff" >> $GITHUB_STEP_SUMMARY
            echo "$(cat versions_diff.md)" >> $GITHUB_STEP_SUMMARY
            rm versions_diff.md
          fi
          
      - name: Write latest versions to summary
        if: ${{ env.IS_SYNC != 'true' }}
        run: |
          mmrl-util index --list > latest_versions.md
          echo "## Latest Versions" >> $GITHUB_STEP_SUMMARY
          echo "$(cat latest_versions.md)" >> $GITHUB_STEP_SUMMARY
          rm latest_versions.md

      - name: Index and Push
        if: ${{ env.IS_SYNC == 'true' }}
        run: |
          git fetch origin main
          git reset --hard origin/main
          git clean -fd
          
          current_time=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          mmrl-util index --push
          
          if ! git diff --quiet || ! git diff --staged --quiet; then
            git add -A
            git commit -m "chore(sync): Update repository data

            ðŸ¤– Auto-generated by GitHub Actions
            ðŸ•’ Time: $current_time
            
            - Sync repository data
            - Update module index
            - Generate static pages"
            
            source git_safe_push.sh
            git_safe_push
          fi

      - name: Upload logs
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: log/*.log

  build:
    runs-on: ubuntu-latest
    needs: sync
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
        
      - name: Setup Pages
        uses: actions/configure-pages@v5
        
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  notify:
    needs: [sync, deploy]
    if: needs.sync.outputs.has_updates == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Download logs
        uses: actions/download-artifact@v4
        with:
          name: logs
          path: log

      - name: Notify Updates
        uses: actions/github-script@v7
        with:
          script: |
            const script = require('./.github/workflows/telegram_updates.js')
            await script({github, context, core})
