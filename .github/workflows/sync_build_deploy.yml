name: sync-build-deploy
on:
  schedule:
    - cron: '0 */4 * * *'

  workflow_dispatch:
   inputs:
      run_sync:
        description: "Run Sync"
        type: choice
        required: true
        default: 'No'
        options:
         - 'Yes'
         - 'No'

permissions:
  contents: write
  issues: write
  pull-requests: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  IS_SYNC: ${{ inputs.run_sync == 'Yes' || github.event_name == 'schedule' }}

jobs:
  sync:
    runs-on: ubuntu-latest
    outputs:
      has_updates: ${{ steps.check_updates.outputs.has_updates }}
      updated_modules: ${{ steps.extract_updates.outputs.modules }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Set up Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mmrl-util

      - name: Create log directory
        run: |
          mkdir -p log
          mkdir -p json

      - name: Sync and Check Updates
        id: check_updates
        if: ${{ env.IS_SYNC == 'true' }}
        run: |
          mmrl-util sync --diff versions_diff.md 2>&1 | tee log/sync_$(date +"%Y-%m-%d").log
          
          if [ -f "versions_diff.md" ] && [ -s "versions_diff.md" ]; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "检测到更新，更新内容："
            cat versions_diff.md
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
            echo "未检测到更新"
          fi

      - name: Write versions diff to summary
        if: ${{ env.IS_SYNC == 'true' }}
        run: |
          if [ -f versions_diff.md ]; then
            echo "## Versions Diff" >> $GITHUB_STEP_SUMMARY
            echo "$(cat versions_diff.md)" >> $GITHUB_STEP_SUMMARY
            rm versions_diff.md
          fi
          
      - name: Write latest versions to summary
        if: ${{ env.IS_SYNC != 'true' }}
        run: |
          mmrl-util index --list > latest_versions.md
          echo "## Latest Versions" >> $GITHUB_STEP_SUMMARY
          echo "$(cat latest_versions.md)" >> $GITHUB_STEP_SUMMARY
          rm latest_versions.md

      - name: Extract updated modules from logs
        id: extract_updates
        if: ${{ env.IS_SYNC == 'true' }}
        run: |
          if [ -f "log/sync_$(date +"%Y-%m-%d").log" ]; then
            UPDATED_MODULES=$(grep -o "update: \[[^]]*\] -> update to" log/sync_$(date +"%Y-%m-%d").log 2>/dev/null | sed 's/update: \[\([^]]*\)\] -> update to/\1/' | sort | uniq | jq -R -s -c 'split("\n") | map(select(length > 0))' || echo "[]")
            echo "modules=$UPDATED_MODULES" >> $GITHUB_OUTPUT
            echo "提取的更新模块: $UPDATED_MODULES"
          else
            echo "尝试查找任何同步日志文件..."
            LATEST_LOG=$(find log -name "sync_*.log" -type f -printf "%T@ %p\n" 2>/dev/null | sort -nr | head -n1 | cut -d' ' -f2)
            if [ -n "$LATEST_LOG" ]; then
              echo "找到最新日志文件: $LATEST_LOG"
              UPDATED_MODULES=$(grep -o "update: \[[^]]*\] -> update to" "$LATEST_LOG" 2>/dev/null | sed 's/update: \[\([^]]*\)\] -> update to/\1/' | sort | uniq | jq -R -s -c 'split("\n") | map(select(length > 0))' || echo "[]")
              echo "modules=$UPDATED_MODULES" >> $GITHUB_OUTPUT
              echo "提取的更新模块: $UPDATED_MODULES"
            else
              echo "警告：找不到任何同步日志文件"
              echo "modules=[]" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Index and Push
        if: ${{ env.IS_SYNC == 'true' }}
        run: |
          mmrl-util index --push

      - name: Upload logs
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: |
            log/*.log
            json/*.json
  
  build:
    runs-on: ubuntu-latest
    needs: sync
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
        
      - name: Setup Pages
        uses: actions/configure-pages@v5
        
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  notify:
    needs: [sync, deploy]
    if: needs.sync.outputs.has_updates == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mmrl-util requests
          
      - name: Download logs artifact
        uses: actions/download-artifact@v4
        with:
          name: logs
          path: ./downloaded_artifacts
          
      - name: Setup working directories
        run: |
          mkdir -p log json modules
          
          echo "下载的文件列表:"
          find ./downloaded_artifacts -type f | sort
          
          cp -r ./downloaded_artifacts/log/* ./log/ 2>/dev/null || echo "没有日志文件可复制"
          cp -r ./downloaded_artifacts/json/* ./json/ 2>/dev/null || echo "没有JSON文件可复制"

      - name: Generate latest modules info
        run: |
          mmrl-util index --list
          
          if [ ! -f "modules.json" ]; then
            echo "未找到modules.json，尝试生成..."
            mmrl-util index
          fi
          
          if [ -f "modules.json" ]; then
            echo "modules.json 文件存在，显示部分内容:"
            cat modules.json | head -20
          else
            echo "警告: 无法找到或生成modules.json文件"
            curl -s -o modules.json https://raw.githubusercontent.com/${{ github.repository }}/main/modules.json || echo "无法下载modules.json文件"
          fi
          
      - name: Parse updated modules
        id: parse_modules
        run: |
          MODULES_JSON='${{ needs.sync.outputs.updated_modules }}'
          echo "原始更新模块信息: $MODULES_JSON"
          
          # 添加验证和调试步骤
          echo "检查JSON格式..."
          if [ -z "$MODULES_JSON" ]; then
            echo "警告: 模块信息为空"
            echo "UPDATED_MODULE_IDS=" >> $GITHUB_ENV
            exit 0
          fi
          
          # 打印JSON以便调试
          echo "JSON数据: $MODULES_JSON"
          
          # 验证JSON格式
          echo "$MODULES_JSON" | jq '.' > /dev/null 2>&1
          if [ $? -ne 0 ]; then
            echo "警告: 更新模块信息不是有效的JSON格式，尝试使用替代方法解析"
            
            # 简单情况：直接作为字符串处理
            if [[ "$MODULES_JSON" == *"["* && "$MODULES_JSON" == *"]"* ]]; then
              # 尝试提取方括号中的内容并按逗号分割
              MODULES=$(echo "$MODULES_JSON" | sed -E 's/.*\[(.*)\].*/\1/g' | tr -d '"' | tr ',' '\n' | sed '/^$/d')
            else
              # 非JSON数组，假设是单个模块ID
              MODULES=$(echo "$MODULES_JSON" | tr -d '"' | tr -d '[]' | tr ',' '\n' | sed '/^$/d')
            fi
          else
            # 如果是有效JSON，使用jq解析
            MODULES=$(echo "$MODULES_JSON" | jq -r '.[]?' 2>/dev/null || echo "")
          fi
          
          echo "解析后的模块列表: $MODULES"
          
          if [ -n "$MODULES" ]; then
            echo "更新的模块列表: $MODULES"
            echo "UPDATED_MODULE_IDS=$MODULES" >> $GITHUB_ENV
            
            for MODULE_ID in $MODULES; do
              echo "同步模块 $MODULE_ID 的最新信息..."
              mmrl-util sync -i "$MODULE_ID" || echo "同步模块 $MODULE_ID 失败"
            done
            
            mmrl-util index
          else
            echo "警告: 无法解析更新的模块列表"
            echo "UPDATED_MODULE_IDS=" >> $GITHUB_ENV
          fi
      
      - name: Prepare notification data
        run: |
          mkdir -p temp_module_data
          
          MODULES="$UPDATED_MODULE_IDS"
          if [ -n "$MODULES" ]; then
            echo "准备更新模块的通知数据..."
            
            for MODULE_ID in $MODULES; do
              echo "处理模块 $MODULE_ID..."
              
              mkdir -p "temp_module_data/$MODULE_ID"
              
              if [ -f "modules.json" ]; then
                # 改进的JSON提取方法
                echo "从modules.json中提取模块 $MODULE_ID 的信息..."
                MODULE_INFO=$(jq -r --arg id "$MODULE_ID" '.modules[] | select(.id == $id) | tojson' modules.json 2>/dev/null || echo "")
                
                # 验证提取的JSON数据
                if [ -n "$MODULE_INFO" ]; then
                  echo "$MODULE_INFO" | jq '.' > /dev/null 2>&1
                  if [ $? -ne 0 ]; then
                    echo "警告: 提取的模块信息格式无效，创建默认信息..."
                    echo "{\"id\": \"$MODULE_ID\", \"version\": \"unknown\", \"versionCode\": -1}" > "temp_module_data/$MODULE_ID/info.json"
                    MODULE_VERSION="unknown"
                    MODULE_VERSION_CODE="-1"
                  else
                    echo "$MODULE_INFO" > "temp_module_data/$MODULE_ID/info.json"
                    # 使用jq -r确保输出不包含引号
                    MODULE_VERSION=$(echo "$MODULE_INFO" | jq -r '.version // "unknown"')
                    MODULE_VERSION_CODE=$(echo "$MODULE_INFO" | jq -r '.versionCode // "-1"')
                    
                    # 确保关键字段包含在info.json中
                    if ! echo "$MODULE_INFO" | jq -e '.name' > /dev/null 2>&1; then
                      # 如果name字段不存在，尝试使用title字段，否则使用ID
                      TITLE=$(echo "$MODULE_INFO" | jq -r '.title // "'$MODULE_ID'"')
                      MODULE_INFO=$(echo "$MODULE_INFO" | jq '. + {name: "'$TITLE'"}')
                      echo "$MODULE_INFO" > "temp_module_data/$MODULE_ID/info.json"
                    fi
                    
                    if ! echo "$MODULE_INFO" | jq -e '.author' > /dev/null 2>&1; then
                      # 如果author字段不存在，检查是否有其他相关字段
                      AUTHOR=$(grep -o "author:.*" "modules/$MODULE_ID"/*.md 2>/dev/null | head -1 | sed 's/author:\s*//i' || echo "未知")
                      if [ "$AUTHOR" = "未知" ]; then
                        AUTHOR=$(grep -o "作者:.*" "modules/$MODULE_ID"/*.md 2>/dev/null | head -1 | sed 's/作者:\s*//' || echo "未知")
                      fi
                      MODULE_INFO=$(echo "$MODULE_INFO" | jq '. + {author: "'$AUTHOR'"}')
                      echo "$MODULE_INFO" > "temp_module_data/$MODULE_ID/info.json"
                    fi
                  fi
                  
                  echo "模块 $MODULE_ID 版本: $MODULE_VERSION ($MODULE_VERSION_CODE)"
                  
                  MODULE_DIR="modules/$MODULE_ID"
                  if [ -d "$MODULE_DIR" ]; then
                    if [ -f "$MODULE_DIR/${MODULE_VERSION}_${MODULE_VERSION_CODE}.md" ]; then
                      echo "找到对应版本的更新日志: $MODULE_DIR/${MODULE_VERSION}_${MODULE_VERSION_CODE}.md"
                      cp "$MODULE_DIR/${MODULE_VERSION}_${MODULE_VERSION_CODE}.md" "temp_module_data/$MODULE_ID/changelog.md"
                    else
                      LATEST_MD=$(find "$MODULE_DIR" -name "*.md" -type f -exec ls -t {} \; 2>/dev/null | head -1 || echo "")
                      if [ -n "$LATEST_MD" ] && [ -f "$LATEST_MD" ]; then
                        echo "未找到精确匹配的更新日志，使用最新的: $LATEST_MD"
                        cp "$LATEST_MD" "temp_module_data/$MODULE_ID/changelog.md"
                      else
                        echo "未找到任何更新日志，创建默认文件"
                        echo "# 版本 $MODULE_VERSION ($MODULE_VERSION_CODE) 更新" > "temp_module_data/$MODULE_ID/changelog.md"
                        echo "此版本已更新，但没有详细的更新日志。" >> "temp_module_data/$MODULE_ID/changelog.md"
                      fi
                    fi
                  else
                    echo "警告: 模块目录 $MODULE_DIR 不存在，尝试同步..."
                    mmrl-util sync -i "$MODULE_ID" || echo "同步模块失败，创建默认更新日志"
                    
                    if [ -d "$MODULE_DIR" ]; then
                      LATEST_MD=$(find "$MODULE_DIR" -name "*.md" -type f -exec ls -t {} \; 2>/dev/null | head -1 || echo "")
                      if [ -n "$LATEST_MD" ] && [ -f "$LATEST_MD" ]; then
                        # 提取更新日志中的版本信息和作者信息来更新模块信息
                        echo "从最新更新日志中提取信息..."
                        
                        # 检查版本信息
                        EXTRACTED_VERSION=$(grep -o "[Vv]ersion:.*" "$LATEST_MD" 2>/dev/null | head -1 | sed 's/[Vv]ersion:\s*//' || echo "")
                        if [ -n "$EXTRACTED_VERSION" ] && [ "$MODULE_VERSION" = "unknown" ]; then
                          echo "从更新日志中提取到版本信息: $EXTRACTED_VERSION"
                          MODULE_INFO=$(echo "$MODULE_INFO" | jq '. + {version: "'$EXTRACTED_VERSION'"}')
                          echo "$MODULE_INFO" > "temp_module_data/$MODULE_ID/info.json"
                        fi
                        
                        # 检查作者信息
                        EXTRACTED_AUTHOR=$(grep -o "[Aa]uthor:.*" "$LATEST_MD" 2>/dev/null | head -1 | sed 's/[Aa]uthor:\s*//' || echo "")
                        if [ -n "$EXTRACTED_AUTHOR" ]; then
                          echo "从更新日志中提取到作者信息: $EXTRACTED_AUTHOR"
                          MODULE_INFO=$(echo "$MODULE_INFO" | jq '. + {author: "'$EXTRACTED_AUTHOR'"}')
                          echo "$MODULE_INFO" > "temp_module_data/$MODULE_ID/info.json"
                        fi
                        
                        cp "$LATEST_MD" "temp_module_data/$MODULE_ID/changelog.md"
                      else
                        echo "# 版本 $MODULE_VERSION ($MODULE_VERSION_CODE) 更新" > "temp_module_data/$MODULE_ID/changelog.md"
                        echo "此版本已更新，但没有详细的更新日志。" >> "temp_module_data/$MODULE_ID/changelog.md"
                      fi
                    else
                      echo "# 版本 $MODULE_VERSION ($MODULE_VERSION_CODE) 更新" > "temp_module_data/$MODULE_ID/changelog.md"
                      echo "此版本已更新，但没有详细的更新日志。" >> "temp_module_data/$MODULE_ID/changelog.md"
                    fi
                  fi
                else
                  echo "警告: 在modules.json中找不到模块 $MODULE_ID 的信息"
                  echo "{\"id\": \"$MODULE_ID\", \"version\": \"unknown\", \"versionCode\": -1}" > "temp_module_data/$MODULE_ID/info.json"
                  echo "# 模块 $MODULE_ID 更新" > "temp_module_data/$MODULE_ID/changelog.md"
                  echo "模块已更新，但没有详细的更新信息。" >> "temp_module_data/$MODULE_ID/changelog.md"
                fi
              else
                echo "警告: modules.json不存在，无法获取模块详细信息"
                echo "{\"id\": \"$MODULE_ID\", \"version\": \"unknown\", \"versionCode\": -1}" > "temp_module_data/$MODULE_ID/info.json"
                echo "# 模块 $MODULE_ID 更新" > "temp_module_data/$MODULE_ID/changelog.md"
                echo "模块已更新，但没有详细的更新信息。" >> "temp_module_data/$MODULE_ID/changelog.md"
              fi
            done
            
            echo "临时目录中的文件:"
            find temp_module_data -type f | sort
          else
            echo "没有要处理的模块"
          fi
          
          echo "MODULE_DATA_DIR=temp_module_data" >> $GITHUB_ENV
      
      - name: Run Telegram notification script
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_TOPIC_ID: ${{ secrets.TELEGRAM_TOPIC_ID }}
          UPDATED_MODULE_IDS: ${{ env.UPDATED_MODULE_IDS }}
          MODULE_DATA_DIR: temp_module_data
        run: |
          echo "运行Telegram通知脚本..."
          echo "当前工作目录: $(pwd)"
          
          echo "工作目录文件列表:"
          find . -maxdepth 3 -type f | grep -v "/__pycache__/" | sort
          
          echo "模块数据目录内容:"
          find $MODULE_DATA_DIR -type f | sort
          
          python scripts/simple_notify.py
